share info about other nodes
  It sortof is, but not very robustly
share data through mesh
alternate methods of communication
  optionize which interfaces
    separately optionize client vs server
  optionize which phy transports

ReAdvertise button
RePublish button
Manual add node, connect over WAN


Gonna need controllers for each PHY type - actually, each protocol
  One controller can have multiple Comms, though.


Optionize
  connection timeouts
  parallelize connection attempts

Fix
  big file timeout
    stream data properly
  ipv6 zone id
  look into why that error about "java.awt.datatransfer.UnsupportedFlavorException: Unicode String"

reconnect
manage Comms
gzip comms
encrypt comms

Advertise
^ Multicast
^ Broadcast
  mDNS
  Bluetooth
  Modem
  QR
  Wifi hotspot?
  RFID
  
!change interrupted processes to cancelable socket calls
close okhttp resources?
Data permit plain reading, particularly FilesData
print git hash
summary limit



Ok, after messing with encryption and then thinking about how I'd need to
integrate it, I think the system needs reworked.  Again.
It is wrong that the TCP system has REST endpoints and websockets.
  (Aside from as bootstrapping convenience.  This may be permitted as an extra.)
The communication mechanism should be more abstract than that.
There should be unidirectional tx mechanisms, for advertisement.
And there should be bidirectional communication mechanisms, for
  sending updates,
  requesting data,
  responding to requests,
  and perhaps some other stuff.
Now, there may be some kinks to work out - like, some media are less well-suited for bidirectional comms.  I sorta think that's just how the cookie crumbles, though.
It should permit half-duplex transports.
Also, we MAAAAY need to deal with checksums or comms error recovery or something.

Track which Comm rx a request, and tx back through it?
  May be implicit
  Match request/response IDs?
do.serialize and do.deserialize now to message structures?
Move poke/request parallelization out of TCP and into general Comms manager
How to know when data packet is finished?
Support heartbeats?
CommsManager -> [Phy]Manager -> Comm ? or
CommsManager -> Comm ?  ...Probably former

Unidirectional broadcast (unencrypted, probably)
  tx Advertisement
    plaintext
Bidirectional 1-1 connection (encryptable)
  tx Summary
  tx Roster
  tx request poke (may not matter with persistent connections) (but, may instead have special handshake)
  ?tx request pong?
  tx request data
  (remember to handle both result or failure)
  tx Advertisement (on initiate connection)
  tx poke (may not be relevant anymore)
  tx request Roster
  
