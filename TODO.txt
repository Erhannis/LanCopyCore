share info about other nodes
  It sortof is, but not very robustly
share data through mesh
alternate methods of communication
  optionize which interfaces
    separately optionize client vs server
  optionize which phy transports

ReAdvertise button
RePublish button
Manual add node, connect over WAN


Gonna need controllers for each PHY type - actually, each protocol
  One controller can have multiple Comms, though.


Optionize
  connection timeouts
  parallelize connection attempts

Fix
  big file timeout
    stream data properly
  ipv6 zone id
  look into why that error about "java.awt.datatransfer.UnsupportedFlavorException: Unicode String"

reconnect
manage Comms
gzip comms
encrypt comms

Advertise
^ Multicast
^ Broadcast
  mDNS
  Bluetooth
  Modem
  QR
  Wifi hotspot?
  RFID
  ...File?  XP
  
!change interrupted processes to cancelable socket calls
close okhttp resources?
Data permit plain reading, particularly FilesData
print git hash
summary limit



Ok, after messing with encryption and then thinking about how I'd need to
integrate it, I think the system needs reworked.  Again.
It is wrong that the TCP system has REST endpoints and websockets.
  (Aside from as bootstrapping convenience.  This may be permitted as an extra.)
    In fact, maybe there should be an official mechanism for it, to permit possible other comms.  Not sure if anything comes CLOSE to TCP, though.  Maybe bluetooth.
The communication mechanism should be more abstract than that.
There should be unidirectional tx mechanisms, for advertisement.
And there should be bidirectional communication mechanisms, for
  sending updates,
  requesting data,
  responding to requests,
  and perhaps some other stuff.
Now, there may be some kinks to work out - like, some media are less well-suited for bidirectional comms.  I sorta think that's just how the cookie crumbles, though.
It should permit half-duplex transports.
Also, we MAAAAY need to deal with checksums or comms error recovery or something.

Track which Comm rx a request, and tx back through it?
  May be implicit
  Match request/response IDs?
do.serialize and do.deserialize now to message structures?
Move poke/request parallelization out of TCP and into general Comms manager
How to know when data packet is finished?
Support heartbeats?
CommsManager -> [Phy]Manager -> Comm ? or
CommsManager -> Comm ?  ...Probably former

Unidirectional broadcast (unencrypted, probably) (optional, turn off?)
  tx Advertisement
    plaintext
  rx Advertisement
    plaintext
Bidirectional 1-1 connection (encryptable)
  tx LSummary
    on connect
    on change
  tx Roster
    on connect
  ?tx request poke? (may not matter with persistent connections) (but, may instead have special handshake)
  ?tx request pong?
  tx request data
  (remember to handle both result or failure)
  (tx data)
  tx AAdvertisement
    on connect
    on update
  ?tx poke? (may not be relevant anymore)
  ?tx request Roster?
  Future:
    ? do actual mesh, transmit data through multiple nodes
Manual/special
  pull data
  manual connect (tcp comm)

Should requests be asynchronous?
  Like, [request data] [receive roster] [receive summary]...[receive data]
  Frankly...probably.  With the different modalities, I'm not sure we'll always be able to guarantee responses will occur before other things.
  Should request/response be matched with IDs?

[command parser] <-> [tls channel] <-> [comm channel]
if unencrypted, just: [command parser] <-> [comm channel]

[comm channel] - basically just the ByteChannel interface, plus connect-on-construction
  connect on construction - throw exception if fail, I guess
  <- read (reports disconnect)
  -> write (reports disconnect)
  close()
  isOpen()
  <<-> interrupt (check approval for TLS error - anything else?  Note, THIS one is synchronous, at least in effect)
    Option: deny all interrupts
      ...Option: approve all interrupts?
    Except...the way the code is structured, the interrupt isn't coming from the channel, but the TrustManager, which doesn't know abt the channel

Wait, there's a difference between incoming and outgoing [comm channel]s.  Or...CAN be.  SHOULD there be?  There needs to be, at first, but after the connection is made, they can be treated about the same, I think.  Well, they need to START different, I guess, so we'll start there.

Have an incoming comm open at all times.
  When a connection comes in, pass it off to the pile of active connections.
  You can also initiate a connection, and if it succeeds, pass it off to the pile of active connections.
  And probably...only one connection needs to exist for a node, and almost certainly only one needs to be used at a time, unless you're having MAJOR RELIABILITY PROBLEMS.


How to know when server should display "Incoming TLS connection.  Local fingerprint is: ASDF.  Waiting for client fingerprint."?  500ms connection delay?


TODO
  fingerprint registry?
    Like, I guess that's the truststore - we could do something about Advertisements, signing them, verifying them, importing hear-say advertisements, verifying them against the registered fingerprint....  Not sure yet, and may put it off.
  finalize refactors
  fix truststore interrupts properly


Ok, part of the problem is that some of these messages need to be streamed.
  Can I support streaming, while also not junking up everything else?
  Really the only thing that needs to be streamed ATM is Data.
  Even then - I thiiink the HTTP sizeless streaming thing operates in chunks.
    Maybe I could have some kind of support for chunking or something?
  This also plays into like, ephemeral modes - getting a request, then...hang on, we decided to permit interleaving
  So...can we be sending chunks, then send an Ad update, then continue with chunks?
    I mean, that's sortof a neat idea.

I decree that communications may take place over any channel.
  More particularly, comm is not tracked, in exchanges - a request can come in on one channel, and a response go out on a different.
    Even Packets of a single Data transfer can be sent across multiple comms.
      This could be used for exceptional resiliency - but will/would require ACKs and resending.

Decree: NodeManager manages TLS wrapping

Ok, comm format:
  int length of serialized message
  serialized message

Message types
  Advertisement
  ID - identifies the immediate sender, specifically
  DataChunk
  Summary

Augh, wait, how to decide which NodeManager gets an incoming connection?
  We could have a separate NM that just handles incame connections.
  BUT, their messages still need to get tagged.
  We could have the first message be an identi...wait, DO we need to tag messages?  
  Hmm.  Maybe only for requests.
  It'd be nice to be able to use incame connections to send data back, though, rather than opening a new connection.
  Nodes could send an ID message, first, and they'd get shuffled to the appropriate NM?
  We'd need to cryptographically verify them, though - don't want a hacked node eavesdropping.
  ...Unless that falls within our security model - every node that CAN make a connection is trusted not to be bad.
  Maybe we'll start with that?  It's a liiiittle concerning.
  Bleh, but the NM doesn't read the messages!
  Maybe we shelve the reuse of incoming connections, for now, and just have request messages be tagged with the target id?
    Note, btw, unless verified, this would allow A to tell B to send data to C, which might be undesirable, for some reason.
  Maybe the NM tags passed-on `byte[] msg` with a CommChannelTag?
    Then, if the CM gets an ID msg that doesn't match the ... hang on
